@using Dashboard.ViewModels
@model DashboardIndexViewModel
@{
    ViewBag.Title = "Dashboard";
}

<div class="row">
    <div class="col-md-6">
        <h3>Functions <small>Registered functions in the system</small></h3>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Function Name</th>
                    <th>Statistics</th>
                </tr>
            </thead>
            <tbody id="function-statistics-body">
                @{ Html.RenderPartial("../Dashboard/PartialFunctionStatistics", Model.FunctionStatisticsViewModels); }
            </tbody>
        </table>
    </div>
    <div class="col-md-6">
        <h3>Invocation Log <small>Recently executed jobs</small></h3>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="col-md-3">Function Name</th>
                    <th class="col-md-1">Status</th>
                    <th class="col-md-2">Status Detail</th>
                </tr>
            </thead>
            <tbody id="invocation-log-body">
                @{ Html.RenderPartial("../Function/PartialInvocationLog", Model.InvocationLogViewModels); }
            </tbody>
        </table>
    </div>
</div>

        <script type="text/javascript">
            $(function () {
                $('.not-running').tooltip();

                var updateLogUrl = '@Url.Action("PartialInvocationLog", "Function")';
                var updateStatisticsUrl = '@Url.Action("PartialFunctionStatistics", "Dashboard")';
                var paused = false;
                var stopRequested = false;
                
                var logTimer = setInterval(function () {

                    if (!paused) {
                        $.ajax({
                            type: 'GET',
                            url: updateLogUrl,
                            async: true,
                            cache: false,
                            success: function (data) {
                                $('#invocation-log-body').html(data);
                            },
                            fail: function (result) {
                            }
                        });
                    }

                    if (stopRequested) {
                        clearInterval(logTimer);
                    }

                }, 2000);

                var logStatistics = setInterval(function () {

                    if (!paused) {
                        $.ajax({
                            type: 'GET',
                            url: updateStatisticsUrl,
                            async: true,
                            cache: false,
                            success: function (data) {
                                $('#function-statistics-body').html(data);
                            },
                            fail: function (result) {
                            }
                        });
                    }

                    if (stopRequested) {
                        clearInterval(logStatistics);
                    }

                }, 2000);
            });
        </script>