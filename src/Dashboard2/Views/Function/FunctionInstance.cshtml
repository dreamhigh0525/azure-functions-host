@using Dashboard.ViewModels
@model FunctionInstanceDetailsViewModel

@{
    var isRunning = Model.InvocationLogViewModel.Status == FunctionInstanceStatus.Running;
    
    ViewBag.Title = "FunctionInstance";

    var log = Model.InvocationLogViewModel;
    var trigger = Model.TriggerReason;

    string alertClass = null;
    string alertHeader = null;
    switch (log.Status)
    {
        case FunctionInstanceStatus.CompletedFailed:
            alertClass = "alert-danger";
            alertHeader = "Failed";
            break;
        case FunctionInstanceStatus.CompletedSuccess:
            alertClass = "alert-success";
            alertHeader = "Completed";
            break;
        case FunctionInstanceStatus.NeverFinished:
            alertClass = "alert-danger";
            alertHeader = "Never Finished";
            break;
        case FunctionInstanceStatus.Running:
            alertClass = "alert-info";
            alertHeader = "Running";
            break;
        case FunctionInstanceStatus.Queued:
            alertClass = "alert-info";
            alertHeader = "Queued";
            break;
        case FunctionInstanceStatus.AwaitingPrereqs:
            alertClass = "alert-info";
            alertHeader = "Awaiting Prerequisites";
            break;
            // don't colorize others.     
    }
}

<ol class="breadcrumb">
    <li>@Html.ActionLink("Dashboard", "Index", "Dashboard")</li>
    <li>@Html.ActionLink(log.FunctionName, "FunctionInstances", "Function", new { functionName = log.FunctionFullName }, new { })</li>
</ol>

<div class="row">
    <div class="col-md-9">
        <h3>Invocation Details <small>@Model.InvocationLogViewModel.FunctionName</small></h3>
        
        @if (isRunning)
        {
            <p>
            @using (Html.BeginForm("Abort", "Function", new { id = Model.InvocationLogViewModel.Id }, FormMethod.Post, new { @class = "form-inline" }))
            {
                if (!Model.IsAborted)
                {
                    <button class="btn btn-danger btn-sm" type="submit"><span class="glyphicon glyphicon-remove"></span> Abort</button>
                }
                else
                {
                    <button class="btn btn-danger btn-sm" disabled>Aborted</button>
                }
            }
            </p>
        }
        
        <p class="alert @alertClass">
            @if (!String.IsNullOrEmpty(alertHeader))
            {
                <b>@alertHeader</b>
            }
            
            @if (log.WhenUtc.HasValue)
            {
                @MoreHtmlHelpers.DateTimeRelative(log.WhenUtc.Value)
            }

            @if (log.Duration.HasValue)
            {
                <span>(@MoreHtmlHelpers.TimeSpanRelative(log.Duration.Value))</span>
            }

            @if (!String.IsNullOrEmpty(log.ExceptionMessage))
            {
                <br/>
                <span>
                    <b>@log.ExceptionType</b>: @log.ExceptionMessage 
                </span>
            }
        </p>

        <p>
            <span class="glyphicon glyphicon-flash"></span> @trigger.ToString()
            @if (Model.Ancestor != null)
            {
                <span> on @Html.ActionLink(Model.Ancestor.FunctionName, "FunctionInstance", "Function", new {id = Model.Ancestor.Id}, new {title = "The parent job which triggered this function" })</span>
            }
        </p>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="col-md-2">Parameter</th>
                    <th class="col-md-3">Value</th>
                    <th class="col-md-3">Notes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var param in Model.Parameters)
                {
                    <tr>
                        <td><b>@param.Name</b></td>
                        <td>
                            @if (param.ArgBlobLink != null)
                            {
                                <a href="@Url.HttpRouteUrl("DefaultApi", new { controller = "Log", action = "Blob", path = param.ArgInvokeString })">@param.ArgInvokeString</a>
                            }
                            else
                            {
                                @param.ArgInvokeString
                            }
                        </td>
                        <td>@param.SelfWatch</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>

<button type="button" class="btn btn-primary btn-sm" data-toggle="collapse" data-target="#output">
    Toggle Output
</button>


<form id="output" class="collapse" role="form">
    
    @if (isRunning)
    {
        <div class="checkbox">
            <label>
                <input type="checkbox" id="auto-scroll" checked> Auto-scroll
            </label>
        </div>
    }
    
    <div class="form-group">
        <textarea id="output-body" rows="10" placeholder="loading..." class="form-control"></textarea>
        <span class="help-block">This represents the console output. It is automatically refreshed.</span>
    </div>
</form>

<script type="text/javascript">
    $(function () {
        var paused = true;
        var output = $('#output-body');
        var url = '@Url.HttpRouteUrl("DefaultApi", new { controller = "Log", action = "Output", id = Model.InvocationLogViewModel.Id })';
        var isRunning = @(isRunning ? "true" : "false")
            
        $('#output').on('shown.bs.collapse', function (e) {
            $.ajax({
                url: url,
                cache: false,
                data: {
                    start: 0
                },
                success: function(result) {
                    output.text(result);
                }
            });

            paused = false;
        });

        $('#output').on('hidden.bs.collapse', function (e) {
            // disable auto-refresh
            paused = true;
        });
        
        var iID = setInterval(function () {
            
            if (!paused && isRunning) {
                var currentLines = output.text().split(/\n/).length;

                $.ajax({
                    type: 'GET',
                    url: url,
                    async: true,
                    cache: false,
                    data: {
                        start: currentLines
                    },
                    success: function (data) {
                        // append the text
                        if (data.length > 0) {
                            output.append('\n' + data);
                        }

                        // scroll to bottom
                        if ($('#auto-scroll:checked').length > 0) {
                            output.scrollTop(output[0].scrollHeight - output.height());
                        }
                    },
                    fail: function (result) {
                    }
                });
            }

            var stopRequested = false;
            if (stopRequested) {
                clearInterval(iID);
            }

        }, 5000);
    });  
</script>

@if (Model.Children.Any())
{
    <div class="row">
        <div class="col-md-9">
            <h3>Children <small>Functions triggered by this function</small></h3>
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th class="col-md-3">Function Name</th>
                        <th class="col-md-1">Status</th>
                        <th class="col-md-2">Status Detail</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var child in Model.Children)
                    {
                        string childLabelClass = null;
                        string childDescClass = null;
                        string childLabelText = null;
                        switch (child.Status)
                        {
                            case FunctionInstanceStatus.CompletedFailed:
                                childLabelClass = "label-danger";
                                childDescClass = "text-error";
                                childLabelText = "Failed";
                                break;
                            case FunctionInstanceStatus.CompletedSuccess:
                                childLabelClass = "label-success";
                                childDescClass = "text-success";
                                childLabelText = "Success";
                                break;
                            case FunctionInstanceStatus.NeverFinished:
                                childLabelClass = "label-warning";
                                childDescClass = "text-error";
                                childLabelText = "Never Finished";
                                break;
                            case FunctionInstanceStatus.Running:
                                childLabelClass = "label-primary";
                                childDescClass = "text-info";
                                childLabelText = "Running";
                                break;
                            case FunctionInstanceStatus.Queued:
                                childLabelText = "Queued";
                                childLabelClass = "label-info";
                                break;
                            case FunctionInstanceStatus.AwaitingPrereqs:
                                childLabelText = "Awaiting Prerequisites";
                                childLabelClass = "label-info";
                                break;
                                // don't colorize others.
                        }
                        <tr class="@childDescClass">

                            <td>
                                @Html.ActionLink(child.FunctionName, "FunctionInstance", "Function", new { child.Id }, new { })
                            </td>

                            <td>
                                @if (!String.IsNullOrEmpty(childLabelText))
                                {
                                    <span class="label @childLabelClass">@childLabelText</span>
                                }
                            </td>
                            <td>
                                @if (child.WhenUtc.HasValue)
                                {
                                    @MoreHtmlHelpers.DateTimeRelative(child.WhenUtc.Value)
                                }

                                @if (child.Duration.HasValue)
                                {
                                    <span>(@MoreHtmlHelpers.TimeSpanRelative(child.Duration.Value))</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </div>
}