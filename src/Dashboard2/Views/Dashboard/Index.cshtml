@using Dashboard.ViewModels
@model DashboardIndexViewModel
@{
    ViewBag.Title = "Dashboard";
}

<div class="row">
    <div class="col-md-6">
        <h3>Functions <small>Registered functions in the system</small></h3>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Function Name</th>
                    <th>Statistics</th>
                    <th>Last Execution</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var statistics in Model.FunctionStatisticsViewModels)
                {
                    <tr>
                        <td>
                            @if (statistics.IsRunning)
                            {
                            }
                            else
                            {
                                <span title="Host not running" class="glyphicon glyphicon-exclamation-sign not-running"></span>
                            }
                            @Html.ActionLink(statistics.FunctionName, "FunctionInstances", "Function", new { functionName = statistics.FunctionFullName }, new { })
                        </td>
                        <td>
                            <a class="label label-success" href="@Url.Action("FunctionInstances", "Function", new { functionName = statistics.FunctionFullName, success = true })">@String.Format("{0:#,0}", statistics.SuccessCount)</a>
                            <a class="label label-danger" href="@Url.Action("FunctionInstances", "Function", new { functionName = statistics.FunctionFullName, success = false })">@String.Format("{0:#,0}", statistics.FailedCount)</a>
                        </td>
                        <td>
                            @if (statistics.LastWriteTime.HasValue)
                            {
                                <span class="pull-right">@MoreHtmlHelpers.DateTimeRelative(statistics.LastWriteTime.Value)</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-6">
        <h3>Invocation Log <small>Recently executed jobs</small></h3>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="col-md-3">Function Name</th>
                    <th class="col-md-1">Status</th>
                    <th class="col-md-2">Status Detail</th>
                </tr>
            </thead>
            <tbody id="invocation-log-body">
                @{ Html.RenderPartial("../Function/PartialInvocationLog", Model.InvocationLogViewModels); }
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <h3>Blobs <small>Search for a specific blob</small></h3>
        @using (Html.BeginForm("LookupBlob", "Function", FormMethod.Get))
        {
            <div class="row form-group">
                <div class="col-md-10 col-xs-8">
                    <input type="text" name="path" placeholder="container/filename.ext" class="form-control input-sm" />
                </div>
                <div class="col-md-2 col-xs-4">
                    <button type="submit" class="btn btn-primary btn-sm">Search</button>
                </div>
            </div>
        }
    </div>
</div>
        <script type="text/javascript">
            $(function () {
                $('.not-running').tooltip();

                var updateLogUrl = '@Url.Action("PartialInvocationLog", "Function")';

                var iID = setInterval(function () {

                    var paused = false;
                    if (!paused) {
                        $.ajax({
                            type: 'GET',
                            url: updateLogUrl,
                            async: true,
                            cache: false,
                            success: function (data) {
                                if (console && console.log) {
                                    console.log(data);
                                }
                                $('#invocation-log-body').html(data);
                            },
                            fail: function (result) {
                            }
                        });
                    }

                    var stopRequested = false;
                    if (stopRequested) {
                        clearInterval(iID);
                    }

                }, 2000);

            });
        </script>
