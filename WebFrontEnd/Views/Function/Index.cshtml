@using WebFrontEnd.Controllers
@using RunnerInterfaces
@model FunctionInfoModel

@{
    ViewBag.Title = "Index";
    var trigger = Model.Descriptor.Trigger;
}

<div class="page-header">
<h1>@Model.Descriptor.Location.GetShorterName() <small>@Model.Descriptor.Description</small></h1>
<p>Last Updated: @Model.Descriptor.Timestamp</p>
</div>

<div class="alert alert-info">
@if (trigger.ListenOnBlobs)
{
    <text>This function is invoked automatically when a new input blob becomes available.</text>
} else if (trigger.TimerInterval != null)
{
    <text>This function is invoked automatically on a timer at frequency (@trigger.TimerInterval)</text>
} else 
{
    <text>This function is not automatically invoked. You can invoke it explicitly via this webpage or via an HTTP RPC call.</text>
}
</div>

<h2>Invoke <small>the function with explicit arguments</small></h2>
@using (Html.BeginForm("InvokeFunctionWithArgs", "Function", FormMethod.Post, new { @class = "form-horizontal" }))
{
    <div class="hero-unit call-unit" id="invoke-unit">
        <div id="invoke-unit-body">
            <span id="invoke-unit-function">@(Model.Descriptor.Location.GetShorterName())</span>

              <div id="invoke-unit-params">
                <input type="hidden" value="@Model.Descriptor.ToString()" name ="func"/>
                <input type="hidden" value="@Model.ReplayGuid" name ="replayGuid"/>

            @if(Model.Parameters.Length == 0) {
                <text>()</text>
            } else {
                <text>
                    (                      
                            @for(int i =0; i < Model.Parameters.Length; i++) {
                                var param = Model.Parameters[i];
                                <div class="control-group">
                                    <label class="control-label" for="argValues[@i]">@param.Name:</label>
                                    <div class="controls">
                                        <input name="argValues[@i]" value="@param.ArgInvokeString" size="100" placeholder="@param.Description"/>
                                    </div>
                                </div>
                            }
                        
                    )
                </text>
            }
                  </div>
        </div>
        <p class="call-unit-commands">
            <button type="submit" class="btn btn-primary"><i class="icon-play-sign"></i> Invoke</button><small> This will execute the function using the supplied parameters.</small>
        </p>
    </div>
}

@if (!string.IsNullOrWhiteSpace(Model.UploadContainerName))
{
    using (Html.BeginForm("Upload", "Function", FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data" }))
    {
        <h2>Upload Blob<small> so that you can invoke this function on it</small></h2>    
        <div class="hero-unit call-unit" >
            <input type="hidden" value="@Model.Descriptor.ToString()" name ="func"/>
            <p>Upload a file from here:</p>
            <input class="icon-upload" type=file name=upload>
            <p>To this container: <b>@Model.UploadContainerName</b></p>
            <button type="submit" class="btn btn-primary"><i class="icon-upload"></i>Upload</button><small> The function will <strong>NOT</strong> be invoked.</small>
        </div>
    }    
}

@if(Model.KeyNames.Any()) {
    <h2>Bind <small>template parameters to the function arguments</small></h2>
    using (Html.BeginForm("ComputeArgsFromNames", "Function", FormMethod.Post, new { @class = "form-horizontal" }))
    {
        <div class="hero-unit call-unit" id="bind-unit">
            <div>
                <input type="hidden" value="@Model.Descriptor.ToString()" name ="func"/>
                @for (int i = 0; i < Model.KeyNames.Length; i++) { 
                    var key = Model.KeyNames[i];
                    <div class="control-group">
                        <label class="control-label" for="key[@i]">@key:</label>
                        <div class="controls">
                            <input name="key[@i]" size="100"/>
                        </div>
                    </div>
                }
            </div>
            <p class="call-unit-commands">
                <button type="submit" class="btn btn-primary"><i class="icon-signin"></i> Apply</button>
                <small>The function will <strong>NOT</strong> be invoked.</small>
            </p>
        </div>
    }
}

@Html.FunctionLogInvokeHistoryLink(Model.Descriptor.Location)

