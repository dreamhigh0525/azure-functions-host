@using WebFrontEnd.Controllers
@model FunctionInfoModel

@{
    ViewBag.Title = "Index";
}

<h2>Details on function </h2>


Details for function: <b>@Model.Descriptor.ToString()</b>

<ul>
<li>Description: <i>@Model.Descriptor.Description</i></li>  
<li>Function version: @Model.Descriptor.Timestamp</li>
</ul>

<h2>When is this function invoked?</h2>
@{
    var trigger = Model.Descriptor.Trigger;
}
@if (trigger.ListenOnBlobs)
{
    <p>This function is invoked automatically when a new input blob becomes available. </p>
} else if (trigger.TimerInterval != null)
{
    <p>This function is invoked automatically on a timer at frequency (@trigger.TimerInterval) </p>
} else 
{
    <p>This function is not automatically invoked. You can invoke it explicitly via this webpage or via an HTTP RPC call.</p>
}

<h3>Explicitly invoke this function</h3>

<!-- mention the rest API . Even regenerate the link? -->

<p>To invoke this function, provide all of the parameters and submit. </p>
<p>Note that all azure storage locations are relative to the <b>@Model.Descriptor.GetAccount().Credentials.AccountName</b> storage container, since that's where the function was uploaded. </p>

@using (Html.BeginForm("InvokeFunctionWithArgs", "Function"))
{
    <input type="hidden" value="@Model.Descriptor.RowKey" name ="func"/>
    
<table border="1">
    <tr>
        <td><b>name</b></td>
        <td><b>Description</b></td>
        <td><b>invoke with value:</b></td>
    </tr>

@for(int i =0; i < Model.Parameters.Length; i++)
{ 
    var param = Model.Parameters[i];
    <tr>
        <td>@param.Name</td>
        <td>@param.Description</td>
        <td bgcolor="#CCCCFF" >
            <input name="argValues[@i]" value="@param.ArgInvokeString" size="100"/>
        </td>
    </tr>
}
    </table>
    
    <input type="submit" value="Invoke this function with supplied values" />
}

<!-- Invoke w/ name parameters. This is the easiest case -->
@if (Model.KeyNames.Length > 0)
{
    <table border="1"><tr><td>
    <p>For convenience, you can provide named parameters to help fill out the invocation parameters:</p>    
        
    @using (Html.BeginForm("ComputeArgsFromNames", "Function"))
    {
        <input type="hidden" value="@Model.Descriptor.RowKey" name ="func"/>
    
        <table border="1">         
            <tr>
                <td>route value name</td>
                <td>value</td>
            </tr>
        @for (int i = 0; i < Model.KeyNames.Length; i++)        
        { 
        <tr>
            @{
            var key = Model.KeyNames[i];
            }
            <td>@(key) :</td>
            <td><input name="key[@i]" /> </td>
        </tr>
        }   
        </table>
        <input type="submit" value="Apply names to arguments (does not invoke)"/>
    }
    </td></tr></table>
}

<H3>Other actions:</H3>
<ul>
    <li>@Html.FunctionLogInvokeHistoryLink(Model.Descriptor.Location)</li>
    <li>@Html.Partial("_RescanFunction", Model.Descriptor) Click this to notify the service that you've uploaded a new version of the function to the container. </li> 
</ul>