<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <SolutionPath>$(MsBuildThisFileDirectory)..\WebStackTooling.sln</SolutionPath>
        
        <NuGetToolsPath>$(MsBuildThisFileDirectory)</NuGetToolsPath>
        
        <!-- Property that enables building a package from a project -->
        <BuildPackage Condition=" '$(BuildPackage)' == '' ">false</BuildPackage>

        <!-- Determines if package restore consent is required to restore packages -->
        <RequireRestoreConsent Condition=" '$(RequireRestoreConsent)' != 'false' ">true</RequireRestoreConsent>
        
    </PropertyGroup>
    
    <PropertyGroup>
        <!-- NuGet command -->
        <NuGetExePath Condition=" '$(NuGetExePath)' == '' ">$(NuGetToolsPath)\nuget.exe</NuGetExePath>
        <PackageSources Condition=" $(PackageSources) == '' ">@(PackageSource)</PackageSources>
        
        <NuGetCommand>"$(NuGetExePath)"</NuGetCommand>

        <PackageOutputDir Condition="$(PackageOutputDir) == ''">$(TargetDir.Trim('\\'))</PackageOutputDir>
        
        <!-- Commands -->
        <RestoreCommand>$(NuGetCommand) restore "$(SolutionPath)" -source "$(PackageSources)"  -NonInteractive -Verbosity Quiet</RestoreCommand>
        <BuildCommand>$(NuGetCommand) pack "$(ProjectPath)" -p Configuration=$(Configuration) -o "$(PackageOutputDir)" -symbols</BuildCommand>

        <!-- Make the build depend on restore packages -->
        <BuildDependsOn Condition="$(BuildPackage) == 'true'">
            $(BuildDependsOn);
            BuildPackage;
        </BuildDependsOn>
    </PropertyGroup>
        
    <Target Name="RestoreBinaryDependencies">
        <Message Importance="high" Text="Restoring binary dependencies '$(PackagesDir)'" />
        <Exec
            Command="$(RestoreCommand)"
            LogStandardErrorAsError="true" />
    </Target>

   <Target Name="EnsureNuGet">
     <DownloadNuGet OutputFilename="$(NuGetExePath)" Condition="!Exists('$(NuGetExePath)')" />
   </Target>

    <Target Name="BuildPackage" DependsOnTargets="EnsureNuGet">
        <Exec Command="$(BuildCommand)" 
              Condition=" '$(OS)' != 'Windows_NT' " />
              
        <Exec Command="$(BuildCommand)"
              LogStandardErrorAsError="true"
              Condition=" '$(OS)' == 'Windows_NT' " />
    </Target>

    <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MsBuildToolsVersion).dll">
       <ParameterGroup>
           <OutputFilename ParameterType="System.String" Required="true" />
       </ParameterGroup>
       <Task>
           <Reference Include="System.Core" />
           <Using Namespace="System" />
           <Using Namespace="System.IO" />
           <Using Namespace="System.Net" />
           <Using Namespace="Microsoft.Build.Framework" />
           <Using Namespace="Microsoft.Build.Utilities" />
           <Code Type="Fragment" Language="cs">
               <![CDATA[
               try {
                   OutputFilename = Path.GetFullPath(OutputFilename);

                   Log.LogMessage("Downloading latest version of NuGet.exe...");
                   WebClient webClient = new WebClient();
                   webClient.DownloadFile("https://nuget.org/nuget.exe", OutputFilename);

                   return true;
               }
               catch (Exception ex) {
                   Log.LogErrorFromException(ex);
                   return false;
               }
           ]]>
           </Code>
       </Task>
   </UsingTask>

</Project>